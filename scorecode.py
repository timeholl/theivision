#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2018 theloop Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys
from os.path import dirname, join, abspath

from loopchain.tools.score_helper import ScoreHelper

dir_path = dirname(abspath(__file__))
sys.path.append(dir_path)

# Basic SCORE helper classes.
from scoretool import ScoreHelperDatabase, SCOREResponse


class SCOREBusinessLogic:
    """User own SCORE implementation.
    DO NOT CHANGE THIS MODULE NAME.
    Implement your module in this class.
    """

    # User can use several DB instances.
    __db = None

    def __init__(self):
        # User can use several DB instances.
        self.__db = ScoreHelperDatabase("MY_OWN_DB", ScoreHelper())


    def invoke_foo1(self, log_func, id, params: dict, block=None):
        """Invoke example function. USE AS REFERENCE. KEEP THIS FUNCTION ARGUMENTS IN YOUR OWN FUNCTIONS.

        In this example, we'll concatenate arguments in a string.

        :param log_func: log function. use like this: log_func("message").
        :type score_db: ScoreHelperDatabase
        :param score_db: SCORE DB utility module
        :param params: parameters from the Tx
        :param block: block data
        :return Dictionary generated by SCOREResponse class.
        """

        # Use id as key.
        key = params["key"]
        value = params["value"]

        try:
            # Store string as value. And key and value must be BYTE type, not only string or object.
            self.__db.put(key.encode(), value.encode())
        except TypeError:
            return SCOREResponse.exception("key or value is not byte-like data.")

        # Validate key and value.
        try:
            value_from_db = self.__db.get_in_invoke(key.encode())
            if value != value_from_db.decode():
                return SCOREResponse.exception("Internal DB error.")

        # Handle exceptions.
        except TypeError:
            return SCOREResponse.exception("Key or value is not byte-like data.")

        except KeyError:
            return SCOREResponse.exception("DB do not Have such a key.")

        # Succeed to operate. Return successful message.
        log_func("Succeed to execute invoke_foo1.")
        return SCOREResponse.succeed()

    # TODO: Add your function for invoke operation.

    def query_foo1(self, log_func, id, params):
        """Query example function. USE AS REFERENCE. KEEP THIS FUNCTION ARGUMENTS IN YOUR OWN FUNCTIONS.

        In this example, we'll look up value by key in params.

        :param log_func: log function. use like this: log_func("message").
        :type score_db: ScoreHelperDatabase
        :param score_db: SCORE DB utility module
        :param params: parameters from the Tx
        :param id: id of JSON RPC 2.0 request
        :return Dictionary generated by SCOREResponse class.
        """

        key = params["key"]
        log_func("Begin query_foo1.")

        try:
            data = self.__db.get_in_query(key.encode())

            result = {"data": data.decode("utf-8")}
            log_func(f'Queried data: {result}')
            return SCOREResponse.succeed("Succeed to query.", result)

        except TypeError:
            return SCOREResponse.exception("Key or value is not byte-like data.")

        except KeyError:
            return SCOREResponse.exception("DB do not Have such a key.")

    # TODO: Add your function for query operation.
